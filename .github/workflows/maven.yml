name: Java Tests with Maven

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      browserName:
        description: "Browser to use for tests"
        default: "chrome"
        required: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Check out el c√≥digo desde el repositorio
      - name: Check out code
        uses: actions/checkout@v3

      # Paso 2: Configurar el JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # Paso 3: Cache de dependencias de Maven
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Paso 4: Verificar la estructura del proyecto
      - name: Verificar la estructura del proyecto
        run: |
          echo "Estructura del proyecto:"
          ls -R $GITHUB_WORKSPACE

      # Paso 5: Configurar Google Chrome y descargar ChromeDriver
      - name: Set up Chrome and ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          CHROME_DRIVER_VERSION=$(curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE)
          wget https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver
          google-chrome-stable --version
          chromedriver --version

      # Paso 6: Construir el proyecto con Maven
      - name: Build with Maven
        id: build
        run: mvn clean package

      # Paso 7: Ejecutar las pruebas
      - name: Run tests
        if: steps.build.outcome == 'success'
        run: mvn -DbrowserName=${{ inputs.browserName }} verify

      # Paso 8: Obtener historial de Allure
      - name: Get Allure history
        uses: actions/checkout@v3
        if: steps.build.outcome == 'success'
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      # Paso 9: Generar reporte Allure
      - name: Allure report action
        uses: simple-elf/allure-report-action@master
        if: steps.build.outcome == 'success'
        id: allure-report
        with:
          allure_results: ${{ vars.ALLURE_RESULTS_PATH }}
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history

      # Paso 10: Desplegar reporte en GitHub Pages
      - name: Deploy report to Github Pages
        if: success()
        uses: crazy-max/ghaction-github-pages@v4
        with:
          target_branch: gh-pages
          build_dir: allure-history
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}